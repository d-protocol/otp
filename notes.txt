DOCKER COMPOSE

# CLEANING UP
docker compose down; docker system prune -f; docker volume prune -f



# STARTING THE CLUSTER

docker compose up -d; docker compose logs -f

docker exec -it microk8s bash

# Inside the container:

mkdir -p /snap/bin; mkdir -p /usr/local/bin

apt-get update && apt-get install -y snapd sudo curl wget git vim

snap download core --channel=stable
snap download microk8s --channel=stable
rm *.assert

systemctl start snapd; 
systemctl enable snapd;
snap wait system seed.loaded

sudo systemctl restart snapd
sudo snap refresh core

snap install microk8s --classic --channel=1.27/stable

microk8s status
which microk8s.kubectl
which microk8s.helm3


========================================

./install/install.sh -v 1.1.0 -m -l

Installing Open Trading Platform version 1.1.0
installing into MicroK8s cluster
adding bitnami chart repo...
"bitnami" has been added to your repositories
installing Kafka...
namespace/kafka created
NAME: kafka-opentp
LAST DEPLOYED: Fri Oct 11 16:59:43 2024
NAMESPACE: kafka
STATUS: deployed
REVISION: 1
TEST SUITE: None
NOTES:
CHART NAME: kafka
CHART VERSION: 26.2.0
APP VERSION: 3.6.0

** Please be patient while the chart is being deployed **

Kafka can be accessed by consumers via port 9092 on the following DNS name from within your cluster:

    kafka-opentp.kafka.svc.cluster.local

Each Kafka broker can be accessed by producers via port 9092 on the following DNS name(s) from within your cluster:

    kafka-opentp-controller-0.kafka-opentp-controller-headless.kafka.svc.cluster.local:9092
    kafka-opentp-controller-1.kafka-opentp-controller-headless.kafka.svc.cluster.local:9092
    kafka-opentp-controller-2.kafka-opentp-controller-headless.kafka.svc.cluster.local:9092

To create a pod that you can use as a Kafka client run the following commands:

    kubectl run kafka-opentp-client --restart='Never' --image docker.io/bitnami/kafka:3.6.0-debian-11-r0 --namespace kafka --command -- sleep infinity
    kubectl exec --tty -i kafka-opentp-client --namespace kafka -- bash

    PRODUCER:
        kafka-console-producer.sh \
            --broker-list kafka-opentp-controller-0.kafka-opentp-controller-headless.kafka.svc.cluster.local:9092,kafka-opentp-controller-1.kafka-opentp-controller-headless.kafka.svc.cluster.local:9092,kafka-opentp-controller-2.kafka-opentp-controller-headless.kafka.svc.cluster.local:9092 \
            --topic test

    CONSUMER:
        kafka-console-consumer.sh \
            --bootstrap-server kafka-opentp.kafka.svc.cluster.local:9092 \
            --topic test \
            --from-beginning
creating kafka topics
pod/kafka-opentp-client created
pod/kafka-opentp-client condition met
Created topic orders.
installing Postgresql database...
namespace/postgresql created
NAME: opentp
LAST DEPLOYED: Fri Oct 11 17:00:27 2024
NAMESPACE: postgresql
STATUS: deployed
REVISION: 1
TEST SUITE: None
NOTES:
CHART NAME: postgresql
CHART VERSION: 13.1.5
APP VERSION: 16.0.0

** Please be patient while the chart is being deployed **

PostgreSQL can be accessed via port 5432 on the following DNS names from within your cluster:

    opentp-postgresql.postgresql.svc.cluster.local - Read/Write connection

To get the password for "postgres" run:

    export POSTGRES_PASSWORD=$(kubectl get secret --namespace postgresql opentp-postgresql -o jsonpath="{.data.postgres-password}" | base64 -d)

To connect to your database run the following command:

    kubectl run opentp-postgresql-client --rm --tty -i --restart='Never' --namespace postgresql --image docker.io/bitnami/postgresql:16.0.0-debian-11-r13 --env="PGPASSWORD=$POSTGRES_PASSWORD" \
      --command -- psql --host opentp-postgresql -U postgres -d postgres -p 5432

    > NOTE: If you access the container using bash, make sure that you execute "/opt/bitnami/scripts/postgresql/entrypoint.sh /bin/bash" in order to avoid the error "psql: local user with ID 1001} does not exist"

To connect to your database from outside the cluster execute the following commands:

    kubectl port-forward --namespace postgresql svc/opentp-postgresql 5432:5432 &
    PGPASSWORD="$POSTGRES_PASSWORD" psql --host 127.0.0.1 -U postgres -d postgres -p 5432

WARNING: The configured password will be ignored on new installation in case when previous PostgreSQL release was deleted through the helm command. In that case, old PVC will have an old password, and setting it through helm won't take effect. Deleting persistent volumes (PVs) will solve the issue.
loading data into Postgresql database...
If you don't see a command prompt, try pressing enter.
pod "opentp-postgresql-client" deleted
installing Envoy...
namespace/envoy created
WARNING: This chart is deprecated
NAME: opentp-envoy
LAST DEPLOYED: Fri Oct 11 17:01:06 2024
NAMESPACE: envoy
STATUS: deployed
REVISION: 1
TEST SUITE: None
service/envoy patched
installing Open Trading Platform...



microk8s kubectl config view --raw > ~/.kube/config
kubectl config current-context


export POSTGRES_PASSWORD=$(kubectl get secret --namespace postgresql opentp-postgresql -o jsonpath="{.data.postgres-password}" | base64 -d)

kubectl run opentp-postgresql-client --rm --tty -i --restart='Never' --namespace postgresql --image docker.io/bitnami/postgresql:16.0.0-debian-11-r13 --env="PGPASSWORD=$POSTGRES_PASSWORD" --command -- psql --host opentp-postgresql -U postgres -d postgres -p 5432

delete the pod 
kubectl delete pod opentp-postgresql-client -n postgresql



kubectl run opentp-postgresql-client --rm --tty -i --restart='Never' --namespace postgresql --image docker.io/bitnami/postgresql:16.0.0-debian-11-r13 --env="PGPASSWORD=$POSTGRES_PASSWORD" --command -- psql --host opentp-postgresql -U postgres -d postgres -p 5432



kubectl port-forward --namespace postgresql svc/opentp-postgresql 5432:5432 &

